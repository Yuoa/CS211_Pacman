#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>


#define I (32)
#define J (42)
#define UP (1)
#define DOWN (2)
#define LEFT (3)
#define RIGHT (4)
#define N (4)
#define MODE (100)
#define PLAYER_I (28)
#define PLAYER_J (27)
#define GHOST_I (11)
#define GHOST_J (21)

typedef struct
{
	int i, j;
	int i_offset, j_offset;
	int dir_now, dir_next;
	int mode;
	int speed;
}Player;

typedef struct
{
	int valid;
	int i, j;
	int i_offset, j_offset;
	int i_dest, j_dest;
	int dir;
	int type;
	int speed;
}Ghost;

void Init(const int datamap[][J], int map[][J], Player* player, Ghost* ghost, int level)
{
	int i, j;

	for (i = 0; i < i; i++)
	{
		for (j = 0; j < J; j++)
		{
			map[i][j] = datamap[i][j];
			printf("%2d", map[i][j]);
		}
		printf("\n");
	}

	(*player).i = PLAYER_I; (*player).j = PLAYER_J;
	(*player).i_offset = 0; (*player).j_offset = 0;
	(*player).dir_now = 0; (*player).dir_next = 0;
	(*player).mode = 0; (*player).speed = 10;

	for (i = 0; i < N; i++)
	{
		ghost[i].i = GHOST_I; ghost[i].j = GHOST_J;
		ghost[i].i_offset = 0; ghost[i].j_offset = 0;
		ghost[i].valid = 0;
	}

	if (level == 1)
	{
		ghost[0].speed = 10;
		ghost[i].valid = 0;
	}
	else if (level == 2)
	{
		ghost[0].speed = 10;
		ghost[1].speed = 10;
		ghost[0].valid = 1;
		ghost[1].valid = 1;
	}
	else if (level == 3)
	{
		ghost[0].speed = 10;
		ghost[1].speed = 10;
		ghost[2].speed = 10;
		ghost[0].valid = 1;
		ghost[1].valid = 1;
		ghost[2].valid = 1;
	}
	else if (level == 4)
	{
		ghost[0].speed = 5;
		ghost[1].speed = 5;
		ghost[2].speed = 5;
		ghost[3].speed = 5;
		ghost[0].valid = 1;
		ghost[1].valid = 1;
		ghost[2].valid = 1;
		ghost[3].valid = 1;
	}
}

void Input(Player* player)
{
	char a;

	a = getch();
	
	if (a == 'w') { if (player->dir_now = 0) { player->dir_now = player->dir_next = UP; } else player->dir_next = UP; }
	else if (a == 's') { if (player->dir_now = 0) { player->dir_now = player->dir_next = DOWN; } else player->dir_next = DOWN; }
	else if (a == 'a') { if (player->dir_now = 0) { player->dir_now = player->dir_next = LEFT; } else player->dir_next = LEFT; }
	else if (a == 'd') { if (player->dir_now = 0) { player->dir_now = player->dir_next = RIGHT; } else player->dir_next = RIGHT; }
}

int proc(int map[][J], Player* player, Ghost* ghost, int level, int*score, int *life)
{
	/*
	offsetupdate();
	dirupdate();
	colcheck();
	objupdate();
	gamecheck();
	*/
}

int main()
{
	Player player;
	Ghost ghost[4];
	const int data_map[I][J] = {
		{ 3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,34,35,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5 },
		{ 10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8 },
		{ 10,0,15,19,19,19,17,0,15,19,19,19,19,19,17,0,15,19,17,0,22,20,0,15,19,17,0,15,19,19,19,19,19,17,0,15,19,19,19,17,0,8 },
		{ 10,0,22,0,0,0,20,0,22,0,0,0,0,0,20,0,22,0,20,0,22,20,0,22,0,20,0,22,0,0,0,0,0,20,0,22,0,0,0,20,0,8 },
		{ 10,0,16,21,21,21,18,0,16,21,21,21,21,21,18,0,16,21,18,0,22,20,0,16,21,18,0,16,21,21,21,21,21,18,0,16,21,21,21,18,0,8 },
		{ 10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8 },
		{ 10,0,15,19,19,19,19,19,19,17,0,15,17,0,15,19,19,19,17,0,22,20,0,15,19,19,19,17,0,15,17,0,15,19,19,19,19,19,19,17,0,8 },
		{ 10,0,16,21,21,21,21,21,21,18,0,22,20,0,16,21,21,21,18,0,16,18,0,16,21,21,21,18,0,22,20,0,16,21,21,21,21,21,21,18,0,8 },
		{ 10,0,0,0,0,0,0,0,0,0,0,22,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,20,0,0,0,0,0,0,0,0,0,0,8 },
		{ 4,9,9,9,9,9,17,0,15,19,19,18,20,0,15,19,19,19,19,19,19,19,19,19,19,19,19,17,0,22,16,19,19,17,0,15,9,9,9,9,9,6 },
		{ 0,0,0,0,0,0,10,0,16,21,21,17,20,0,16,21,21,21,21,21,21,21,21,21,21,21,21,18,0,22,15,21,21,18,0,8,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,10,0,0,0,0,22,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,20,0,0,0,0,8,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,10,0,15,17,0,22,20,0,15,19,17,0,23,27,27,31,33,33,32,27,27,24,0,22,20,0,15,17,0,8,0,0,0,0,0,0 },
		{ 7,7,7,7,7,7,18,0,22,20,0,16,18,0,22,0,20,0,28,0,0,0,0,0,0,0,0,30,0,16,18,0,22,20,0,16,7,7,7,7,7,7 },
		{ 0,0,0,0,0,0,0,0,22,20,0,0,0,0,22,0,20,0,28,0,0,0,0,0,0,0,0,30,0,0,0,0,22,20,0,0,0,0,0,0,0,0 },
		{ 9,9,9,9,9,9,17,0,22,16,19,19,17,0,16,21,18,0,25,29,29,29,29,29,29,29,29,26,0,15,19,19,18,20,0,15,9,9,9,9,9,9 },
		{ 0,0,0,0,0,0,10,0,22,15,21,21,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,21,21,17,20,0,8,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,10,0,22,20,0,0,0,0,15,19,17,0,15,19,19,19,19,17,0,15,19,17,0,0,0,0,22,20,0,8,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,10,0,22,20,0,15,17,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,15,17,0,22,20,0,8,0,0,0,0,0,0 },
		{ 3,7,7,7,7,7,18,0,16,18,0,22,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,20,0,16,18,0,16,7,7,7,7,7,5 },
		{ 10,0,0,0,0,0,0,0,0,0,0,22,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,20,0,0,0,0,0,0,0,0,0,0,8 },
		{ 10,0,15,19,19,19,19,19,17,0,15,18,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,16,17,0,15,19,19,19,19,19,17,0,8 },
		{ 10,0,16,21,21,21,21,21,18,0,16,17,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,15,18,0,16,21,21,21,21,21,18,0,8 },
		{ 10,0,0,0,0,0,0,0,0,0,0,22,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,20,0,0,0,0,0,0,0,0,0,0,8 },
		{ 14,19,19,19,19,17,0,15,19,17,0,22,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,20,0,15,19,17,0,15,19,19,19,19,13 },
		{ 12,21,21,21,21,18,0,22,0,20,0,22,20,0,22,0,20,0,22,0,0,0,0,20,0,22,0,20,0,22,20,0,22,0,20,0,16,21,21,21,21,11 },
		{ 10,0,0,0,0,0,0,22,0,20,0,16,18,0,16,21,18,0,16,21,21,21,21,18,0,16,21,18,0,16,18,0,22,0,20,0,0,0,0,0,0,8 },
		{ 10,0,15,19,19,17,0,22,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,20,0,15,19,19,17,0,8 },
		{ 10,0,22,0,0,20,0,22,0,20,0,15,19,19,19,19,19,19,19,19,17,0,15,19,19,19,19,19,19,19,17,0,22,0,20,0,22,0,0,20,0,8 },
		{ 10,0,16,21,21,18,0,16,21,18,0,16,21,21,21,21,21,21,21,21,18,0,16,21,21,21,21,21,21,21,18,0,16,21,18,0,16,21,21,18,0,8 },
		{ 10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8 },
		{ 4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,6 }
	};
	int map[I][J];
	int score = 0, life,
	int level = 1;

	while(1)
	{
		Init(data_map, map, &player, ghost, level);
		
		while (1)
		{
			Input(&player);
			proc(map, &player, ghost, level, &score, &life);

			/*
			if gameover level=1 break
			if clear level++ break
			*/

			//map_update();
			//show();
			//delay();

		}
	}
}